let concat: (T: Any -> [T..] -> [T..] -> [T..]) <==
    T: Any -([T..] -> [T..] -> [T..])->
    first: [T..] -([T..] -> [T..])->
    second: [T..] -[T..]->
        if first |> (is_empty <| type T) then
            second
        else if second |> (is_empty <| type T) then
            first
        else
            (push <| type T)
                <| (first |> (head <| type T))
                <| (first |> (tail <| type T) |> (concat <| type T) <| second)

let List_Element <== Int
let numbers_123: [List_Element..] <== [1 2 3]
let empty: [List_Element..] <== []

numbers_123
    |> (concat <| type List_Element) <| empty
    |> (concat <| type List_Element) <| []
    |> (concat <| type List_Element) <| [5 - 1]
