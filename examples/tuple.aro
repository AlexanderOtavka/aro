let x: Int <- 2
let tup: (Int Int Bool) <- (1 + (3 * 2)  x * x  #true())
let (a: Int  b: Num  c: Bool) <- tup

let add_or_multiply: (((Num Num) Bool) => Num) <-
    fn ((first: Num  second: Num)  should_add: Bool) =Num=>
        if should_add then
            first + second
        else
            first * second

add_or_multiply <| ((a b) c)
