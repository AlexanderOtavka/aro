use std::str::FromStr;
use untyped_ast::{Ast, Expression, BinOp, RelOp, NumOp, Value, Type, Pattern};

grammar;

pub Expr: Ast<Expression> = {
    <l:@L> "if" <e1:Expr> "then" <e2:Expr> "else" <e3:Expr> <r:@R> =>
        Ast::<Expression>::new(l, r, Expression::If(e1, e2, e3)),

    <l:@L> "let" <p:Pattern> "<-" <v:Expr> <e:Expr> <r:@R> =>
        Ast::<Expression>::new(l, r, Expression::Let(p, v, e)),
    <l:@L> "let" <n:TypeIdent> "<-" <v:Type> <e:Expr> <r:@R> =>
        Ast::<Expression>::new(l, r, Expression::TypeLet(n, v, e)),

    <l:@L> <p:IdentPattern> "=" <et:ValueType> "=>" <e:Expr> <r:@R> =>
        Ast::<Expression>::new(l, r, Expression::Value(Value::Func(p, et, e))),
    <l:@L> "fn" <p:Pattern> "=" <et:ValueType> "=>" <e:Expr> <r:@R> =>
        Ast::<Expression>::new(l, r, Expression::Value(Value::Func(p, et, e))),

    <l:@L> <p:TypeIdent> ":" <s:ValueType> "=" <et:ValueType> "=>" <e:Expr> <r:@R> =>
        Ast::<Expression>::new(l, r, Expression::Value(Value::GenericFunc(p, s, et, e))),

    <l:@L> <s:Assignment> ";" <e:Expr> <r:@R> =>
        Ast::<Expression>::new(l, r, Expression::Sequence(s, e)),

    Assignment,
};

Assignment = {
    <l:@L> "*!" <x:Unary> "<-" <v:Assignment> <r:@R> => Ast::<Expression>::new(l, r, Expression::RefSet(x, v)),
    Call,
};

Call = {
    <l:@L> <v:Call> "->" "*!" <x:Unary> <r:@R> => Ast::<Expression>::new(l, r, Expression::RefSet(x, v)),
    <l:@L> <f:Call> "<|" <a:Comp> <r:@R> => Ast::<Expression>::new(l, r, Expression::Call(f, a)),
    <l:@L> <a:Call> "|>" <f:Comp> <r:@R> => Ast::<Expression>::new(l, r, Expression::Call(f, a)),
    <l:@L> <f:Call> "<|" "type" <t:ValueType> <r:@R> => Ast::<Expression>::new(l, r, Expression::GenericCall(f, t)),
    <l:@L> "type" <t:ValueType> "|>" <f:Comp> <r:@R> => Ast::<Expression>::new(l, r, Expression::GenericCall(f, t)),
    Comp,
};

Comp = {
    <l:@L> <a:Comp> "<=" <b:Arith> <r:@R> => Ast::<Expression>::new(l, r, Expression::BinOp(BinOp::Rel(RelOp::LEq), a, b)),
    Arith,
};

Arith = {
    <l:@L> <a:Arith> "+" <b:Factor> <r:@R> => Ast::<Expression>::new(l, r, Expression::BinOp(BinOp::Num(NumOp::Add), a, b)),
    <l:@L> <a:Arith> "-" <b:Factor> <r:@R> => Ast::<Expression>::new(l, r, Expression::BinOp(BinOp::Num(NumOp::Sub), a, b)),
    Factor,
};

Factor = {
    <l:@L> <a:Factor> "*" <b:Value> <r:@R> => Ast::<Expression>::new(l, r, Expression::BinOp(BinOp::Num(NumOp::Mul), a, b)),
    <l:@L> <a:Factor> "/" <b:Value> <r:@R> => Ast::<Expression>::new(l, r, Expression::BinOp(BinOp::Num(NumOp::Div), a, b)),
    Unary,
};

Unary = {
    <l:@L> "&!" <v:Unary> <r:@R> => Ast::<Expression>::new(l, r, Expression::RefNew(v)),
    <l:@L> "*!" <x:Unary> <r:@R> => Ast::<Expression>::new(l, r, Expression::RefGet(x)),
    Value,
};

Value = {
    <l:@L> <v:Int> <r:@R> => Ast::<Expression>::new(l, r, Expression::Value(Value::Int(v))),
    <l:@L> <v:Num> <r:@R> => Ast::<Expression>::new(l, r, Expression::Value(Value::Num(v))),
    <l:@L> <v:Bool> <r:@R> => Ast::<Expression>::new(l, r, Expression::Value(Value::Bool(v))),
    <l:@L> <v:Ident> <r:@R> => Ast::<Expression>::new(l, r, Expression::Ident(v)),

    <l:@L> "(" ")" <r:@R> => Ast::<Expression>::new(l, r, Expression::Value(Value::Tuple(vec![]))),
    <l:@L> "(" <h:Expr> <t: Expr+ > ")" <r:@R> =>
        Ast::<Expression>::new(l, r, Expression::Value(Value::Tuple({
            let mut vec = t;
            vec.insert(0, h);
            vec
        }))),

    <l:@L> "[" <e: Expr* > "]" <r:@R> =>
        Ast::<Expression>::new(l, r, Expression::Value(Value::List(e))),

    <l:@L> "{" <e: RecordEntry* > "}" <r:@R> =>
        Ast::<Expression>::new(l, r, Expression::Value(Value::Record(
            e.into_iter().collect()
        ))),

    <l:@L> <e:Value> "." <f:Ident> <r:@R> =>
        Ast::<Expression>::new(l, r, Expression::RecordAccess(e, f)),

    <l:@L> "@hook" "(" <n:r#""([a-z](_?[a-z])*\.)+[a-z](_?[a-z])*!?""#> <t:Type> ")" <r:@R> =>
        Ast::<Expression>::new_hook(l, r, n, t),

    "(" <Expr> ")",
};

pub Type: Ast<Type> = {
    <l:@L> <p:ValueType> "=>" <e:Type> <r:@R> => Ast::<Type>::new(l, r, Type::Func(p, e)),
    <l:@L> <n:TypeIdent> ":" <s:ValueType> "=>" <e:Type> <r:@R> => Ast::<Type>::new(l, r, Type::GenericFunc(n, s, e)),
    ValueType,
};

ValueType = {
    <l:@L> <n:TypeIdent> <r:@R> => Ast::<Type>::new(l, r, Type::Ident(n)),

    <l:@L> "Int" <r:@R> => Ast::<Type>::new(l, r, Type::Int),
    <l:@L> "Num" <r:@R> => Ast::<Type>::new(l, r, Type::Num),
    <l:@L> "Bool" <r:@R> => Ast::<Type>::new(l, r, Type::Bool),
    <l:@L> "Any" <r:@R> => Ast::<Type>::new(l, r, Type::Any),
    <l:@L> "None" <r:@R> => Ast::<Type>::new(l, r, Type::None),

    <l:@L> "&" <t:ValueType> <r:@R> => Ast::<Type>::new(l, r, Type::Ref(t)),

    <l:@L> "(" ")" <r:@R> => Ast::<Type>::new(l, r, Type::Tuple(vec![])),
    <l:@L> "(" <h:Type> <t: Type+ > ")" <r:@R> => Ast::<Type>::new(l, r, Type::Tuple({
        let mut vec = t;
        vec.insert(0, h);
        vec
    })),

    <l:@L> "[" <t:Type> "]" <r:@R> => Ast::<Type>::new(l, r, Type::List(t)),

    <l:@L> "{" <e: RecordTypeEntry* > "}" <r:@R> =>
        Ast::<Type>::new(l, r, Type::Record(e.into_iter().collect())),

    "(" <Type> ")",
};

Pattern: Ast<Pattern> = {
    <l:@L> "(" ")" <r:@R> => Ast::<Pattern>::new(l, r, Pattern::Tuple(vec![])),
    <l:@L> "(" <h:Pattern> <t: Pattern+ > ")" <r:@R> =>  Ast::<Pattern>::new(l, r, Pattern::Tuple({
        let mut vec = t;
        vec.insert(0, h);
        vec
    })),

    IdentPattern,

    "(" <Pattern> ")"
};

RecordEntry: (String, Ast<Expression>) = {
    <n:Ident> "<-" <e:Expr> => (n, e),
};

RecordTypeEntry: (String, Ast<Type>) = {
    <n:Ident> ":" <t:Type> => (n, t),
};

IdentPattern: Ast<Pattern> = {
    <l:@L> <n:Ident> ":" <t:ValueType> <r:@R> => Ast::<Pattern>::new(l, r, Pattern::Ident(n, t)),
};

Num: f64 = {
    r"-?[0-9]+\.[0-9]+" => f64::from_str(<>).unwrap(),
};

Ident: String = {
    r"[a-z]+((_[0-9]+)|(_[a-z]+))*!?" => String::from(<>),
};

TypeIdent: String = {
    r"[A-Z][a-z]*((_[0-9]+)|(_[A-Z][a-z]*))*" => String::from(<>),
};

Int: i32 = {
    r"-?[0-9]+" => i32::from_str(<>).unwrap(),
};

Bool: bool = {
    r"#true" => true,
    r"#false" => false,
};
