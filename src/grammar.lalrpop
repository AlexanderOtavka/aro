use std::str::FromStr;
use ast::{Ast, Expression, BinOp, Value};
use std::f64::{NAN, INFINITY};

grammar;

pub Expr: Ast = {
    <l:@L> "if" <e1:Expr> "then" <e2:Expr> "else" <e3:Expr> <r:@R> =>
        Ast::new(l, r, Expression::If(e1, e2, e3)),
    Comp,
};

Comp = {
    <a:Comp> <l:@L> "<=" <r:@R> <b:Arith> =>
        Ast::new(l, r, Expression::BinOp(BinOp::LEq, a, b)),
    Arith,
};

Arith = {
    <a:Arith> <l:@L> "+" <r:@R> <b:Factor> =>
        Ast::new(l, r, Expression::BinOp(BinOp::Add, a, b)),
    <a:Arith> <l:@L> "-" <r:@R> <b:Factor> =>
        Ast::new(l, r, Expression::BinOp(BinOp::Sub, a, b)),
    Factor,
};

Factor = {
    <a:Factor> <l:@L> "*" <r:@R> <b:Value> => Ast::new(l, r, Expression::BinOp(BinOp::Mul, a, b)),
    <a:Factor> <l:@L> "/" <r:@R> <b:Value> => Ast::new(l, r, Expression::BinOp(BinOp::Div, a, b)),
    Value,
};

Value = {
    <l:@L> <v:Int> <r:@R> => Ast::new(l, r, Expression::Value(Value::Int(v))),
    <l:@L> <v:Float> <r:@R> => Ast::new(l, r, Expression::Value(Value::Float(v))),
    <l:@L> <v:Bool> <r:@R> => Ast::new(l, r, Expression::Value(Value::Bool(v))),
    "(" <Expr> ")",
};

Float: f64 = {
    r"-?[0-9]+\.[0-9]+" => f64::from_str(<>).unwrap(),
    r"NaN" => NAN,
    r"inf" => INFINITY,
};

Int: i32 = {
    r"-?[0-9]+" => i32::from_str(<>).unwrap(),
};

Bool: bool = {
    r"true" => true,
    r"false" => false,
};
